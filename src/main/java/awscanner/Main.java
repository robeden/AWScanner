/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package awscanner;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ec2.Ec2Client;
import software.amazon.awssdk.services.sts.StsClient;
import software.amazon.awssdk.services.sts.model.GetCallerIdentityResponse;
import software.amazon.awssdk.services.sts.model.StsException;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;


@Command( name = "checksum", mixinStandardHelpOptions = true )
public class Main implements Callable<Integer> {
	private static final Region[] STS_HUNT_REGIONS = { Region.US_EAST_1, Region.US_GOV_EAST_1 };

	@Option( names = { "-p", "--profile" }, description = "Credential profile name",
		required = true )
	private String profile;


	@Override
	public Integer call() throws Exception {
		AwsCredentialsProvider cred_provider = ProfileCredentialsProvider.create( profile );

		GetCallerIdentityResponse response = huntForCallerIdentity( cred_provider );
		System.out.printf( "Caller: user=%1$s account=%2$s arn=%3$s%n",
			response.userId(), response.account(), response.arn() );

		String partition = response.arn().split( ":" )[ 1 ];
		System.out.println( "Partition: " + partition );

		ExecutorService executor = Executors.newWorkStealingPool();

		List<Region> regions = loadRegions( partition.equals( "aws-us-gov" ), cred_provider );

		List<Future<RegionInfo>> futures = regions.stream()
			.map( r -> executor.submit( new RegionScanner( r, cred_provider, executor ) ) )
			.toList();

//		List<Future<RegionInfo>> futures = executor.invokeAll( regions.stream()
//			.map( r -> new RegionScanner( r, cred_provider, executor ) )
//			.toList() );

		System.out.println( "Loading..." );
		for ( Future<RegionInfo> future : futures ) {
			RegionInfo region_info = future.get();
			System.out.println(region_info);
//			System.out.printf( "---- %1$s ----\n%2$s", region_info.region(), region_info );
		}

		return 0;
	}


	private List<Region> loadRegions( boolean is_gov, AwsCredentialsProvider cred_provider ) {
		try ( Ec2Client client = Ec2Client.builder()
			.region( is_gov ? Region.US_GOV_EAST_1 : Region.US_EAST_1 )
			.credentialsProvider( cred_provider )
			.build() ) {

			return client.describeRegions().regions().stream()
				.filter( r -> !r.optInStatus().equals( "not-opted-in" ) )
				.map( r -> Region.of( r.regionName() ) )
				.toList();
		}
	}


	/**
	 * Loops through supported bootstrap regions to try to find the correct partition for STS connection.
	 */
	private GetCallerIdentityResponse huntForCallerIdentity( AwsCredentialsProvider cred_provider ) {
		StsException last_exception = null;
		for ( Region r : STS_HUNT_REGIONS ) {
			try ( StsClient client = StsClient.builder()
				.credentialsProvider( cred_provider )
				.region( r )
				.build() ) {

				return client.getCallerIdentity();
			}
			catch ( StsException ex ) {
				last_exception = ex;
			}
		}
		//noinspection ConstantConditions
		throw last_exception;
	}


	public static void main( String[] args ) {
		int exitCode = new CommandLine( new Main() ).execute( args );
		System.exit( exitCode );
	}
}
